# vim: set ft=bashrc tw=80
export LIBRARY_PATH="/usr/lib/x86_64-linux-gnu"
export LD_LIBRARY_PATH="/usr/local/lib"

export DEVWS_REPO="/home/jason/dev-root/debesys-one"
export DEPLOY_ONE_OFF_NEVER_EXPIRE=1

if [ -f $DEVWS_REPO/deploy/chef/scripts/bashrc/devws.bash ]; then
   # Skip this step if devws.bash isn't found where it's expected.
   source $DEVWS_REPO/deploy/chef/scripts/bashrc/devws.bash
fi

# added this before I knew what JAVA_HOME was...
export JDK8_BIN=/opt/jdk/bin/java

# required for ase builds
export LANG='en_US.UTF-8'
export LANGUAGE='en_US'

alias ttrun='$(git rev-parse --show-toplevel)/run'
alias ttsudo='sudo ttrun'
function ttgdb {
    prog=$1
    shift 1
    gdb --args build/x86-64/debug/bin/$prog $@
}
alias cf='cd /etc/debesys'
alias lg='cd /var/log/debesys'

# project dirs
alias r1='cd ~/dev-root/debesys-one'
alias r2='cd ~/dev-root/debesys-two'
alias r3='cd ~/dev-root/debesys-three'

function _cb {
    cbr=$(echo $(git rev-parse --show-toplevel)/deploy/chef/cookbooks)
    [[ -z "$cbr" ]] && return

    dest="$cbr/mds_adapter_$1"
    [[ -d "$cbr/mds_adapter_$1" ]] || dest="$cbr"
    pushd "$dest" >/dev/null
}
alias cb=_cb

function _cbhas {
    if [[ $# -lt 2 ]]; then
        echo "need [cookbook] [pattern]"
        return
    fi

    pushd "$(git rev-parse --show-toplevel)/deploy/chef/cookbooks" >/dev/null || return
    cb="mds_adapter_$1"
    [[ -d "$cb" ]] || cb="$1"
    if ! [[ -d "$cb" ]]; then
        echo "no cookbook $cb"
        return
    fi

    hashfile="$cb/attributes/debesys_repo_hash.rb"
    if ! [[ -r $hashfile ]]; then
        echo "no attribute file $hashfile"
        return
    fi

    cbhash=$(grep \"version\" "$hashfile" | cut -f2 -d= | grep -Po '\w+')
    git log --grep "$2" $cbhash -n 1
    popd >/dev/null
}
alias cbhas=_cbhas

export DEVWS_SKIP_VALIDATE_REQUIREMENTS=1

project_dirs=(
lbm
mds
misc/miscutils
misc/ttmetrics
price_server/ps_common
price_server/price_client
price_server/price_unifier
test
price_server/test
the_arsenal/all_messages/source/tt/messaging
)

function tag {
    rr || return
    cat /dev/null > tags
    for d in $(echo "${project_dirs[@]}" | tr -s " " | tr " " "\n")
    do {
        ctags -Ra $d
    }; done
    popd >/dev/null
}

function external_knife_() {
    knife "$@" -c ~/.chef/knife.external.rb
}
alias eknife='external_knife_'

alias ke='knife node edit'
alias ksh='knife node show'
alias eke='eknife node edit'
alias eksh='eknife node show'

function ekjuno {
    mkt=$(echo "$1" | awk '{print toupper($1)}')
    eknife search "juno_up_config_market_ids:*_$mkt* AND chef_environment:ext-prod-live" -a ipaddress
}

function bgf {
    knife tag create $1 basegofast
}

function lbmify {
    rr || return
    for d in debug idebug release irelease; do
        mkdir -p build/x86-64/$d/etc/debesys
        cp /etc/debesys/lbm_license_file.txt build/x86-64/$d/etc/debesys/
    done
}

export MDS_TARGETS="mds demo_adapter price_server_engine replay_driver"
function mkmds {
    rr || return
    lmk $MDS_TARGETS
    popd >/dev/null
}

function mkclean {
    rr || return
    rm -rf build the_arsenal/all_messages/_pb_out
    lbmify
    popd >/dev/null
}

function imkmds {
    rr || return
    lmk --idebug $MDS_TARGETS
    popd >/dev/null
}

function sbe {
    rr || return
    sbe_dir=price_server/ps_common/sbe_messages
    cd $sbe_dir
    SBE_JAR=$reporootdir/$sbe_dir/sbe-all.jar
    ./make_schema.sh
    cd sbe_common
    ./make_enums.py
    popd >/dev/null
}

function _pdci {
    file="$1"
    shift 1
    cmd="ttrun release price_decoder --dedup -f $file"
    iid=$(basename "$file" | grep -Eo "[0-9]{8,}")
    iidfilter=""
    if [[ ! -z "$iid" ]]; then
        eval $cmd --iid $iid $@
    else
        eval $cmd $@
    fi
}
alias pdci=_pdci
alias pdc="ttrun release price_decoder"

function cbdevup {
    for cb in $@; do
        sed -i "s/\(version\s\+\)'.\+'/\1'1000000.0.0'/" "$cb/metadata.rb"
    done
    knife cookbook --cookbook-path `git rev-parse --show-toplevel`/deploy/chef/cookbooks upload "$@"
}

function cboneoff {
    cb || return
    version=$1
    shift 1
    for cb in $@; do
        sed -i "s/\(version\s\+\)'.\+'/\1'0.0.$version'/" "$cb/metadata.rb"
    done
    knife cookbook --cookbook-path `git rev-parse --show-toplevel`/deploy/chef/cookbooks upload "$@"
    popd >/dev/null
}

function cbhash {
    cb || return
    tip=$1
    shift 1
    for cb in $(ls -d "$@"); do sed -i "s/\"\w\+\"$/\"$tip\"/" $cb/attributes/debesys_repo_hash.rb; done
    popd >/dev/null
}

function ttw {
    env="$1"
    eshost="$2"

    url=""
    baseenv=""
    fullenv=""

    if [[ "$env" = "dev-cert" ]]; then
        fullenv="int-dev-cert"
        url="trade-dev.trade.tt"
        baseenv="cert"
    elif [[ "$env" = "dev-sim" ]]; then
        fullenv="int-dev-sim"
        url="trade-dev.trade.tt"
        baseenv="sim"
    elif [[ "$env" = "stage-cert" ]]; then
        fullenv="int-stage-cert"
        url="trade-stage.trade.tt"
        baseenv="cert"
    elif [[ "$env" = "stage-sim" ]]; then
        fullenv="int-stage-sim"
        url="trade-stage.trade.tt"
        baseenv="sim"
    elif [[ "$env" = "perf" ]]; then
        fullenv="int-dev-perf"
        url="trade-dev.trade.tt"
        baseenv="cert"
    elif [[ "$env" = "uat" ]]; then
        fullenv="ext-uat-cert"
        url="uat.trade.tt"
        baseenv="cert"
    elif [[ "$env" = "sim" ]]; then
        fullenv="ext-prod-sim"
        url="trade.tt"
        baseenv="sim"
    elif [[ "$env" = "live" ]]; then
        fullenv="ext-prod-live"
        url="trade.tt"
        baseenv="live"
    else
        echo "unknown environment $env"
        return
    fi

    url="https://$url/$baseenv/home?esHost=$eshost-edge-$fullenv.debesys.net"
    google-chrome $url
}

function edge {
    env="$1"
    query="run_list:*edgeserver* AND chef_environment:*$env*"
    query+=" NOT chef_environment:*delayed*"
    query+=" NOT extract_package_overrides_edgeserver_config:irelease" 
    query+=" NOT run_list:*edgeserver\\:\\:noop*"
    host=$(knife search "$query" -a name 2>/dev/null | grep name: | awk '{ print $2 }' | head -n 1)
    if [[ "$host" == "" ]]; then
        echo "error: no host found"
        return
    fi

    ttw $env $host
}

function capunzip {
    unzip -o -j -d ~/captures/ $1
    rm $1
}

function capget {
    args=$(xclip -o -sel clip)
    link=$(echo $args | awk '{print $4}' | sed "s/'//g")
    file=$(echo $link | cut -f1 -d? | xargs -0 basename)
    wget -nc -O "/tmp/$file" $link
    capunzip "/tmp/$file"
}

function nodesel {
    instance=$1
    if [[ -z "$instance" ]]; then
        echo "expect: nodesel [instance]"
        return
    fi
    pipe=/tmp/mds_demo_commands.$instance
    echo 'pse beacon 2' | sudo tee $pipe && sleep 1 && echo 'pse beacon 0' | sudo tee $pipe
}

function nodeevac {
    instance=$1
    if [[ -z "$instance" ]]; then
        echo "expect: nodeevac [instance]"
        return
    fi
    pipe=/tmp/mds_demo_commands.$instance
    echo 'pse beacon 3' | sudo tee $pipe && echo 'pse beacon 0' | sudo tee $pipe
}

function noderoll {
    for instance in "$@"; do
        pipe=/tmp/mds_demo_commands.$instance
        echo adapter stop | sudo tee $pipe
    done
    sleep .5
    for instance in "$@"; do
        pipe=/tmp/mds_demo_commands.$instance
        echo adapter start | sudo tee $pipe
    done
}

function upstage {
    if [[ $# -lt 2 ]]; then
        echo "expect: [cookbook] [release_no]"
        return
    fi

    cb="$1"
    branch="release_v$2/current"
    echo "running upenv of $cb on $branch"
    upenv -c $cb -e int-stage -b $branch
}

function _lc {
    awk '{ 
        gsub(/ tsExchangeSend=[0-9]+ tsServerRecv=[0-9]+/, "")
        gsub(/[A-Z]+.+\|/, "")
        gsub(/\[SPLUNK_IGNORE\]/, "")
        print
    }'
}
alias lc=_lc
function _clip_lc {
    xclip -o -sel clip | lc | xclip -i -sel clip
}
alias clc=_clip_lc

function _rd {
    if [[ $# -lt 2 ]]; then
        echo "expect: exchange"
        return
    fi
    ttrun replay_driver -l build/x86-64/debug/lib/lib$1_adapter.so -c /etc/debesys/mds_adapter_$1.conf $@
}
alias rd=_rd

function _mdsfeeds {
    if [[ $# -lt 2 ]]; then
        echo "expect: exchange [args...]"
        return
    fi

    ex=$1
    shift 1
    mds_feeds.py -c /etc/debesys/mds_adapter_$ex.conf $@
}
alias mdsfeeds=_mdsfeeds

function wjcat() {
    ssh wks jcat $1 | xclip
}

function _tm {
    rr || return
    cd the_arsenal/all_messages/source/tt/messaging
    }
alias tm=_tm

function _debesys_bootstrap {
    if [[ $# -lt 1 ]]; then
        echo "expect: ip"
        return
    fi

    ip=$1
    ssh $1 'cat <<-EOF |sudo tee /root/.vimrc
filetype plugin indent on
set nocompatible
set bg=dark
set expandtab
set sw=4 ts=4
EOF'
}
alias dbs=_debesys_bootstrap
