# vim: set ft=bashrc tw=80
export LIBRARY_PATH="/usr/lib/x86_64-linux-gnu"
export LD_LIBRARY_PATH="/usr/local/lib"

export DEVWS_REPO="/home/jason/dev-root/debesys-one"

if [ -f $DEVWS_REPO/deploy/chef/scripts/bashrc/devws.bash ]; then
   # Skip this step if devws.bash isn't found where it's expected.
   source $DEVWS_REPO/deploy/chef/scripts/bashrc/devws.bash
fi

# added this before I knew what JAVA_HOME was...
export JDK8_BIN=/opt/jdk/bin/java

# required for ase builds
export LANG='en_US.UTF-8'
export LANGUAGE='en_US'

alias ttrun='$(git rev-parse --show-toplevel)/run'
alias suttrun='sudo $(git rev-parse --show-toplevel)/run'
alias cf='pushd /etc/debesys'
alias lg='pushd /var/log/debesys'

# project dirs
alias r1='pushd ~/dev-root/debesys-one'
alias r2='pushd ~/dev-root/debesys-two'
alias r3='pushd ~/dev-root/debesys-three'

function _cb {
    cbr=$(echo $(git rev-parse --show-toplevel)/deploy/chef/cookbooks)
    [[ -z "$cbr" ]] && return

    dest="$cbr/mds_adapter_$1"
    [[ -d "$cbr/mds_adapter_$1" ]] || dest="$cbr"
    pushd "$dest" >/dev/null
}
alias cb=_cb

function _cbhas {
    if [[ $# -lt 2 ]]; then
        echo "need [cookbook] [pattern]"
        return
    fi

    pushd "$(git rev-parse --show-toplevel)/deploy/chef/cookbooks" >/dev/null || return
    cb="mds_adapter_$1"
    [[ -d "$cb" ]] || cb="$1"
    if ! [[ -d "$cb" ]]; then
        echo "no cookbook $cb"
        return
    fi

    hashfile="$cb/attributes/debesys_repo_hash.rb"
    if ! [[ -r $hashfile ]]; then
        echo "no attribute file $hashfile"
        return
    fi

    cbhash=$(grep \"version\" "$hashfile" | cut -f2 -d= | grep -Po '\w+')
    git log --grep "$2" $cbhash -n 1
    popd >/dev/null
}
alias cbhas=_cbhas

export DEVWS_SKIP_VALIDATE_REQUIREMENTS=1

project_dirs=(
lbm
mds
misc/miscutils
misc/ttmetrics
price_server/ps_common
price_server/price_client
price_server/price_unifier
test
price_server/test
the_arsenal/all_messages/source/tt/messaging
)

function tag {
    rr || return
    cat /dev/null > tags
    for d in $(echo "${project_dirs[@]}" | tr -s " " | tr " " "\n")
    do {
        ctags -Ra $d
    }; done
    popd >/dev/null
}

function external_knife_() {
    knife "$@" -c ~/.chef/knife.external.rb
}
alias eknife='external_knife_'

alias ke='knife node edit'
alias ksh='knife node show'
alias eke='eknife node edit'
alias eksh='eknife node show'

function ekjuno {
    mkt=$(echo "$1" | awk '{print toupper($1)}')
    eknife search "juno_up_config_market_ids:*_$mkt* AND chef_environment:ext-prod-live" -a ipaddress
}

function kssh {
    knife ssh --no-host-key-verify -a ipaddress "$1" "$2"
}

function ekssh {
    eknife ssh --no-host-key-verify -a ipaddress "$1" "$2"
}

function bgf {
    knife tag create $1 basegofast
}

function lmk {
    ~/build.sh --mks-file "" $@
}

function mk {
    ~/build.sh --mks-file ~/.my_mks --no-proto --use-cache $@
}

export MY_TARGETS="mds demo_adapter price_server_engine price_client_test"
function mkmds {
    rr || return
    ~/build.sh --mks-file "" $MY_TARGETS
    popd >/dev/null
}

function imkmds {
    rr || return
    ~/build.sh --idebug --mks-file "" $MY_TARGETS
    popd >/dev/null
}

function sbe {
    rr || return
    sbe_dir=price_server/ps_common/sbe_messages
    cd $sbe_dir
    SBE_JAR=$reporootdir/$sbe_dir/sbe-all.jar
    ./make_schema.sh
    cd sbe_common
    $reporootdir/run python make_enums.py
    popd >/dev/null
}

function lbmify {
    rr || return
    for d in debug idebug release irelease; do
        mkdir -p build/x86-64/$d/etc/debesys
        cp /etc/debesys/lbm_license_file.txt build/x86-64/$d/etc/debesys/
    done
}

function _pdci {
    file="$1"
    shift 1
    cmd="ttrun release price_decoder --dedup -f $file"
    iid=$(basename "$file" | grep -Eo "[0-9]{8,}")
    iidfilter=""
    if [[ ! -z "$iid" ]]; then
        eval $cmd --iid $iid $@
    else
        eval $cmd $@
    fi
}
alias pdci=_pdci
alias pdc="suttrun price_decoder"

function cbdevup {
    for cb in $@; do
        sed -i "s/\(version\s\+\)'.\+'/\1'1000000.0.0'/" "$cb/metadata.rb"
    done
    knife cookbook --cookbook-path `git rev-parse --show-toplevel`/deploy/chef/cookbooks upload "$@"
}

function cboneoff {
    cb || return
    version=$1
    shift 1
    for cb in $@; do
        sed -i "s/\(version\s\+\)'.\+'/\1'0.0.$version'/" "$cb/metadata.rb"
    done
    knife cookbook --cookbook-path `git rev-parse --show-toplevel`/deploy/chef/cookbooks upload "$@"
    popd >/dev/null
}

function cbhash {
    cb || return
    tip=$1
    shift 1
    for cb in $(ls -d "$@"); do sed -i "s/\"\w\+\"$/\"$tip\"/" $cb/attributes/debesys_repo_hash.rb; done
    popd >/dev/null
}

function ttw {
    env="$1"
    eshost="$2"

    url=""
    baseenv=""
    fullenv=""

    if [[ "$env" = "dev-cert" ]]; then
        fullenv="int-dev-cert"
        url="trade-dev.trade.tt"
        baseenv="cert"
    elif [[ "$env" = "dev-sim" ]]; then
        fullenv="int-dev-sim"
        url="trade-dev.trade.tt"
        baseenv="sim"
    elif [[ "$env" = "stage-cert" ]]; then
        fullenv="int-stage-cert"
        url="trade-stage.trade.tt"
        baseenv="cert"
    elif [[ "$env" = "stage-sim" ]]; then
        fullenv="int-stage-sim"
        url="trade-stage.trade.tt"
        baseenv="sim"
    elif [[ "$env" = "perf" ]]; then
        fullenv="int-dev-perf"
        url="trade-dev.trade.tt"
        baseenv="cert"
    elif [[ "$env" = "uat" ]]; then
        fullenv="ext-uat-cert"
        url="uat.trade.tt"
        baseenv="cert"
    elif [[ "$env" = "sim" ]]; then
        fullenv="ext-prod-sim"
        url="trade.tt"
        baseenv="sim"
    elif [[ "$env" = "live" ]]; then
        fullenv="ext-prod-live"
        url="trade.tt"
        baseenv="live"
    else
        echo "unknown environment $env"
        return
    fi

    url="https://$url/$baseenv/home?esHost=$eshost-edge-$fullenv.debesys.net"
    google-chrome $url
}

function edge {
    env="$1"
    query="run_list:*edgeserver* AND chef_environment:*$env*"
    query+=" NOT chef_environment:*delayed*"
    query+=" NOT extract_package_overrides_edgeserver_config:irelease" 
    query+=" NOT run_list:*edgeserver\\:\\:noop*"
    host=$(knife search "$query" -a name 2>/dev/null | grep name: | awk '{ print $2 }' | head -n 1)
    if [[ "$host" == "" ]]; then
        echo "error: no host found"
        return
    fi

    ttw $env $host
}

function pullcap {
    link=$1
    file=$(basename $link)

    wget -nc -P /tmp $link
    unzip -o -j -d /tmp /tmp/$file
    rm /tmp/$file
}

function selnode {
    echo 'pse beacon 0' | sudo tee /tmp/mds_demo_commands.1.$1 && echo 'pse beacon 2' | sudo tee /tmp/mds_demo_commands.1.$1
}

function do_oneoff {
    if [[ $# -lt 2 ]]; then
        echo "expect: cookbook node1 [node2...]"
        return
    fi

    ref="-r --request-build"
    if [[ "$1" = "-n" ]]; then
        ref="-n"
        shift 1
    fi
    if [[ "$1" = "-r" ]]; then
        ref="-r $2"
        shift 2
    fi

    cb="$1"
    shift 1
    if [[ $# -eq 0 ]]; then
        echo "need at least 1 node"
        return
    fi

    nodes=$@
    echo "running oneoff of $cb on $nodes"
    oneoff -c $cb $ref -s $nodes --run-chef --override-oneoff --skip-package-check
}

function upstage {
    if [[ $# -lt 2 ]]; then
        echo "expect: cookbook version"
        return
    fi

    cb="$1"
    branch="release_v$2/current"
    echo "running upenv of $cb on $branch"
    upenv -c $cb -e int-stage -b $branch
}

function _lstrip {
    sed -r 's/ tsExchangeSend=[0-9]+ tsServerRecv=[0-9]+//' $@ \
        | sed -r 's/\s+\| \S+ \| KV \|//' \
        | sed -r 's/\[SPLUNK_IGNORE\]//'
}
alias lstrip=_lstrip
