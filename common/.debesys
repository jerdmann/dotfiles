# vim: set ft=bashrc
#
# vcd stuff
export INTAD_USER=jerdmann
export VCD_ORG=Dev_General

export LIBRARY_PATH="/usr/lib/x86_64-linux-gnu"
export LD_LIBRARY_PATH="/usr/local/lib"

export AWS_DEFAULT_REGION='us-east-1'
export JENKINS_USER='jerdmann'
export TT_EMAIL='jason.erdmann@tradingtechnologies.com'
export TTDIAG_USER_ID='271'

# ec2 manager name
export MGR="jerdmann"

export DEVWS_REPO="/home/jason/dev-root/debesys-one"

if [ -f $DEVWS_REPO/deploy/chef/scripts/bashrc/devws.bash ]; then
   # Skip this step if devws.bash isn't found where it's expected.
   source $DEVWS_REPO/deploy/chef/scripts/bashrc/devws.bash
fi

# devws.bash contains an alias deploy, you might want to change the name to an alias you already use.
# alias dpl="devws_request_deploy"

# devws.bash contains an alias build, you might overwrite it if you only build one component
# alias build="devws_request_build -t all_edge"

alias ttrun='`git rev-parse --show-toplevel`/run'
alias suttrun='sudo `git rev-parse --show-toplevel`/run'
alias cf='cd /etc/debesys'
alias lg='cd /var/log/debesys'

# project dirs
alias r1='cd ~/dev-root/debesys-one'
alias r2='cd ~/dev-root/debesys-two'
alias r3='cd ~/dev-root/debesys-three'
alias cb='cd `git rev-parse --show-toplevel`/deploy/chef/cookbooks'
alias cdsbe='cd `git rev-parse --show-toplevel`/price_server/ps_common/sbe_messages'
alias cdpro='cd `git rev-parse --show-toplevel`/the_arsenal/all_messages/source/tt/messaging'

alias cdscrap='cd ~/projects/scrap'

# tests
alias mktest='pushd `git rev-parse --show-toplevel` && pmake price_server_tests'
alias pstest='pushd `git rev-parse --show-toplevel` && sudo ./run helmsman tt.price_server.test.suites.test_price_client_basic_fix && popd'
alias psatest='pushd `git rev-parse --show-toplevel` && sudo ./run helmsman tt.price_server.test.suites.test_price_client_advanced_fix && popd'

export DEVWS_SKIP_VALIDATE_REQUIREMENTS=1

project_dirs=(
lbm
mds
misc/miscutils
price_server/ps_common
price_server/price_client
price_server/price_unifier
test
price_server/test
the_arsenal/all_messages/source/tt/messaging
)

function tag {
    rr || return
    cat /dev/null > tags
    for d in $(echo "${project_dirs[@]}" | tr -s " " | tr " " "\n")
    do {
        ctags -Ra $d
    }; done
    popd >/dev/null
}

function perf-crunch {
    sudo chmod 644 perf.data && perf script > out.perf && stackcollapse-perf.pl out.perf > out.folded && sudo flamegraph.pl out.folded > perf.svg
}

function mkdeb () {
    sudo mkdir /etc/debesys 2>/dev/null || :
    sudo mkdir /var/log/debesys 2>/dev/null || :
    sudo chown jason /etc/debesys
    sudo chown jason /var/log/debesys
    sudo chmod 775 /etc/debesys
    sudo chmod 775 /var/log/debesys
}

function testify () {
    reporootdir=$(git rev-parse --show-toplevel)
    [[ -n "$reporootdir" ]] || return
    rm -rf build/x86-64/debug/python/tt/price_server
    ln -sf $reporootdir/price_server/test/tt/price_server build/x86-64/debug/python/tt
}

function external_knife_() {
    knife "$@" -c ~/.chef/knife.external.rb
}
alias eknife='external_knife_'

alias ksj='knife search "tags:jerdmann*"'
alias ke='knife node edit'
alias ksh='knife node show'
alias eke='eknife node edit'
alias eksh='eknife node show'

filter_genpop="NOT chef_environment:*-delayed NOT run_list:*ps_server\:\:loopback* NOT run_list:*depth_coll*"

# has to be a better way to do this.  hilarious noop filter for now
filter_none="NOT chef_environment:*fffffff*"

# various "nice" front-ends
function ks {
    _knife_search knife "$filter_genpop" "$@"
}

function eks {
    _knife_search external_knife_ "$filter_genpop" "$@"
}

function kps {
    _knife_search knife "$filter_genpop" "$@"
}

function ekps {
    _knife_search external_knife_ "$filter_genpop" "$@"
}

function ksn {
    _knife_flat_search knife "$1" "$2"
}

function eksn {
    _knife_flat_search external_knife_ "$1" "$2"
}

function kpdsu {
    _knife_search knife "$filter_none" "pds_uploader_$1" "$2"
}

function ekpdsu {
    _knife_search external_knife_ "$filter_none" "pds_uploader_$1" "$2"
}

# single entrypoint for knife searches
function _knife_search {
    cmd="$1"
    filter="$2"
    rl="$3"
    env="$4"
    shift 4
    args="$@"

    if [[ -z "$args" ]]; then
        args="-a chef_environment -a ipaddress -a run_list -a tags"
    fi
    $cmd search "run_list:*$rl* AND chef_environment:*$env* $filter" ${=args}
}

# similar, but one-line server names output
# handy for populating CLI args to other tools
function _knife_flat_search {
    cmd="$1"
    rl="$2"
    env="$3"

    $cmd search "run_list:*$rl* AND chef_environment:*$env*" -a name | grep "name:" | awk '{printf "%s ", $2}'
}

function kssh {
    knife ssh -a ipaddress "run_list:*$1* AND chef_environment:*$2*" "$3"
}

function bgf {
    knife tag create $1 basegofast
}

function pmake {
    ~/build.sh $@
}

function lmake {
    rr || return
    make -j$(nproc) use_distcc=0 $@
    popd >/dev/null
}

function isearch {
    rr || return
    ./run python price_server/scripts/instrument_search.py $@
    popd >/dev/null
}

export MDS_COOKBOOKS="price_server market_data_server market_data_cme"

export MY_PRICE_TARGETS="price_server test_lh price_client_test price_unifier_test price_decoder"
function ptmake {
    rr || return
    ~/build.sh $MY_PRICE_TARGETS
    popd >/dev/null
}

function sbe {
    rr || return
    sbe_dir=price_server/ps_common/sbe_messages
    cd $sbe_dir
    SBE_JAR=$reporootdir/$sbe_dir/sbe-all.jar
    ./make_schema.sh
    cd sbe_common
    $reporootdir/run python make_enums.py
    popd >/dev/null
}

function lbmify {
    rr || return
    for d in debug idebug release irelease; do
        mkdir -p build/x86-64/$d/etc/debesys
        cp /etc/debesys/lbm_license_file.txt build/x86-64/$d/etc/debesys/
    done
}

function _pdc {
    file="$1"
    shift 1
    iid=$(basename "$file" | grep -Eo "[0-9]{8,}")
    iidfilter=""
    if [[ ! -z "$iid" ]]; then
        price_decoder -f $file --iid $iid --dedup $@
    else
        price_decoder -f $file --dedup $@
    fi
}
alias pdc=_pdc

function cbdevup {
    for cb in $@; do
        sed -i "s/\(version\s\+\)'.\+'/\1'1000000.0.0'/" "$cb/metadata.rb"
    done
    knife cookbook --cookbook-path `git rev-parse --show-toplevel`/deploy/chef/cookbooks upload "$@"
}

function cbhash {
    for cb in $(ls -d "$@"); do tip=$(git rev-parse HEAD); sed -i "s/\"\w\+\"$/\"$tip\"/" $cb/attributes/debesys_repo_hash.rb; done
}
